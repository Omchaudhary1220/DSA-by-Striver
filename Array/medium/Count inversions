/* 
 brute force solution is using nested loop with O(n^2).
-> Optimise solution is using modified merge sort.
*/
#include<bits/stdc++.h>
using namespace std;
void print(vector<int>arr,int n){
    cout<<"Array elements are: ";
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}
int merge(vector<int>&arr,int s,int mid,int e){
   int count=0;
   vector<int>temp;
   int left=s;
   int right=mid+1;
   while(left<=mid&&right<=e){
       if(arr[left]<=arr[right]){
           temp.push_back(arr[left++]);
       }
       else{
           temp.push_back(arr[right++]);
           count+=(mid-left+1);
       }
   }
   while(left<=mid){
       temp.push_back(arr[left]);
       left++;
   }
   while(right<=e){
       temp.push_back(arr[right]);
       right++;
   }
   for(int i=s;i<=e;i++){
       arr[i]=temp[i-s]; 
   }
   return count;
}
int mergesort(vector<int>&arr,int s,int e){
  int count=0;
  if(s>=e){
      return count;
  } 
  int mid=s+(e-s)/2;
  count+=mergesort(arr,s,mid);
  count+=mergesort(arr,mid+1,e);
  count+=merge(arr,s,mid,e);
  return count;
}

int main(){
    vector<int>arr={2,5,1,3,4};
    int n=arr.size();
    cout<<"value:"<<mergesort(arr,0,n-1)<<endl;
    print(arr,arr.size());
    return 0;
}
